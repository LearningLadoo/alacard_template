import 'dart:convert';
import 'package:alacard_template/constants.dart';
import 'package:alacard_template/database/cardFields/address.dart';
import 'package:alacard_template/database/cardFields/customField.dart';
import 'package:alacard_template/database/cardFields/updateHistory.dart';
import 'package:alacard_template/database/localFunctions.dart';
import 'package:alacard_template/functions.dart';
import 'cardFields/contactNo.dart';
import 'cardFields/socialMedia.dart';
/*{
  "templateType":"svg|jpg",
  "source": "personal|inbuilt|business",
  "code": "businessCode+templatecode",
  "colors":{
    "1": [0,0,0,1],
    "2": [0,0,0,1]
  },
  "editable": true,
  "front": {
    "<name,title,etc>": {
      "googleFont": "true|false when false then look for ttf file",
      "fontStyle": {
      "bold": true,
      "fontFamily": "Nunito",
      "color": [0,0,0,1],
      "size": 0.06
      },
      "position": [180,95]
    },
    "Contactnos, SocialMedia, etc": {
      "same as above":"only organize is extra",
      "organize": {
        "align": "|",
        "gap": 1.0
      }
    }
  },
  "back": {}
}*/

class CardData {
  /*
  *                        received             mycard                   manual
  * cardName/processed  fakeIDofCard/same    cardName/fakeIDofMyCard   autoGeneratedID
  * globalID/processed  fakeIDofCard+isBothWays/same  myUID/fakeIDofMyCard          ""
  *
  * */
  String? cardName; // last is for security, second last is for auth
  String? name, note, about, title, email, businessName, groupName, website, globalId;//global id is real but only while saving in sql or sharing we process it
  List<ContactNo>? contactNos;
  List<SocialMedia>? socialMedias;
  Address? address;
  List<CustomField>? customFields;
  DateTime? dateTimeCreated;
  DateTime? dateTimeUpdated;
  List<UpdateHistory?> updateHistory; // in case of received card all the epochs that are greater than created epoch will be visible | this contains tag too
  bool? isUpdated, isFavourite ;
  bool isAuthentic;
  String? nickName;
  bool? isAnalytics, isSecureSharing;
  int? cardsLeft;
  CardType cardType;
  Map<CardFace,String?>? imageTokens = {CardFace.front: null,CardFace.back: null,CardFace.icon: null};//these tokens are real image tokens we only process them while saving in sql or firestore, if it starts with unfinished then it needs backup
  String? businessCode; //this is used to link databases of business
  Map<String,dynamic>? templateName; // this contains all the json file details
  String? templateCode;
  CardData(
      {this.cardName,
      this.name,
      this.note,
      this.about,
      this.title,
      this.email,
      this.businessName,
      this.groupName,
      this.website,
      this.globalId,
      this.contactNos,
      this.socialMedias,
      this.address,
      this.customFields,
      this.dateTimeCreated,
      this.dateTimeUpdated,
      this.updateHistory = const [],
      this.isUpdated = false,
      this.isFavourite = false,
      this.isAuthentic = false,
      this.nickName,
      this.businessCode,
      this.isAnalytics = false,
      this.isSecureSharing = false,
      this.cardsLeft,
      this.cardType = CardType.manuallyAdded,
      this.imageTokens,
      this.templateName,
      this.templateCode
      });

  bool getCardDataFromMap(Map<String,dynamic> cardMap){
    bool temp = false;
    //isUpdated
    var tokenList = cardMap["imageTokens"]!=null?cardMap["imageTokens"]!.split(sameFieldSeparator):[null,null,null];
    logger.v("starting converting card");
    this.cardName = cardMap["cardName"];
    this.name = cardMap["name"];
    this.note = cardMap["note"];
    this.about = cardMap["about"];
    this.title = cardMap["title"];
    this.email = cardMap["email"];
    this.businessName = cardMap["businessName"];
    this.groupName = cardMap["groupName"];
    this.website = cardMap["website"];
    this.globalId = cardMap["globalId"];
    //print("step 2");
    this.contactNos = stringToContactNos(cardMap["contactNos"]);
    this.socialMedias = stringToSocialMedias(cardMap["socialMedias"]);
    //print("step 3");
    this.address = stringToAddress(cardMap["address"]);
    //print("step 4");
    this.customFields = stringToCustomFields(cardMap["customFields"]);
    //print("step 5");
    this.dateTimeCreated = cardMap["dateTimeCreated"]!=null?DateTime.parse(cardMap["dateTimeCreated"]!):null;
    this.dateTimeUpdated = cardMap["dateTimeUpdated"]!=null?DateTime.parse(cardMap["dateTimeUpdated"]!):null;
    //print("step 6");
    this.updateHistory = stringToUpdatesHistory(cardMap["updateHistory"]);
    //print("step 7");
    this.isFavourite = cardMap["isFavourite"]!=null?cardMap["isFavourite"].toString()=="true":false;
    //print("step 7.1");
    this.isUpdated = cardMap["isUpdated"]!=null?cardMap["isUpdated"].toString()=="true":false;
    //print("step 7.2");
    this.isAuthentic = cardMap["isAuthentic"]!=null?cardMap["isAuthentic"].toString()=="true":false;
    //print("step 7.3");
    this.nickName = cardMap["nickName"];
    //print("step 7.4");
    this.businessCode= cardMap["businessCode"];
    //print("step 7.5");
    this.isSecureSharing = cardMap["isSecureSharing"]!=null?cardMap["isSecureSharing"].toString()=="true":false;
    //print("step 7.6");
    this.isAnalytics = cardMap["isAnalytics"]!=null?cardMap["isAnalytics"].toString()=="true":false;
    //print("step 7.7");
    this.cardsLeft = (cardMap["cardsLeft"]!=null&&cardMap["cardsLeft"]!="null")?int.parse(cardMap["cardsLeft"].toString()):null;
    //print("step 7.8");
    this.cardType =cardMap["cardType"]!=null?getCardTypeFromString(cardMap["cardType"]!):CardType.mine;
    //print("step 8");
    this.imageTokens = {CardFace.front:tokenList[0],CardFace.back:tokenList[1],CardFace.icon:tokenList[2]};
    //print("step 9");
    this.templateName = cardMap["templateName"]!=null?(json.decode(cardMap["templateName"]) as Map<String, dynamic>):null;
    //print("step 10");
    this.templateCode = cardMap["templateCode"];
    //print("completed conversion!");
    return true;
  }

  Map<String,String?> getMapFromCardData({bool forSql = true }){
    if(this.imageTokens==null){
      this.imageTokens = {CardFace.front: null,CardFace.back: null,CardFace.icon: null};
    }
    if(this.templateName==null){
      this.templateName = {
        "tempCode": this.templateCode,
        "templateType":"jpg",
        "source": "personal",
        "editable": true,
        "front": {},
        "back": {}
      };
    }
    if(this.templateName!["tempCode"]!=null&&!forSql){
      this.templateName!["tempCode"] = this.templateName!["tempCode"].replaceAll(unfinished,"");
    }
    // forSql -> in local or in cloud
    Map<String,String?> _tempMap = {
      "cardName":this.cardName,
      "name":this.name,
      "about":this.about,
      "title":this.title,
      "email":this.email,
      "businessName":this.businessName,
      "website":this.website,
      "globalId" :this.globalId,//this is processed id
      "contactNos":contactNosToString(this.contactNos??[]),
      "socialMedias":socialMediasToString(this.socialMedias??[]),
      "address":this.address!=null?this.address!.toStringWithSeparator():"",
      "customFields":customFieldsToString(this.customFields??[]),
      "dateTimeCreated":this.dateTimeCreated!=null?this.dateTimeCreated!.toIso8601String():null,
      "dateTimeUpdated":this.dateTimeUpdated!=null?this.dateTimeUpdated!.toIso8601String():null,
      "updatesHistory":updatesHistoryToString(this.updateHistory),
      "cardType":this.cardType.toString(),
      "imageTokens":"${this.imageTokens![CardFace.front]}$sameFieldSeparator${this.imageTokens![CardFace.back]}$sameFieldSeparator${this.imageTokens![CardFace.icon]}",
      "templateName": json.encode(this.templateName),
      "note": this.note,
      "isFavourite":this.isFavourite.toString(),
      "isAuthentic":this.isAuthentic.toString(),
      "businessCode":this.businessCode,
    };
    switch (this.cardType) {
      case CardType.mine:
        _tempMap.remove("note");
        _tempMap.remove("isFavourite");
        _tempMap.addAll({
          "nickName":this.nickName,
          "isSecureSharing":this.isSecureSharing.toString(),
          "cardsLeft" : this.cardsLeft.toString(),
          "isAnalytics" : this.isAnalytics.toString(),
        });
        break;
      case CardType.manuallyAdded:
        _tempMap.remove("businessCode");
        _tempMap.addAll({
          "isAuthentic": "false",
        });
        break;
      case CardType.received:
        _tempMap.addAll({
          "groupName":this.groupName,
        });
        break;
    }
    if(forSql) {
      _tempMap.addAll({"isUpdated": this.isUpdated.toString()});
    }else{
      //for firebase
      _tempMap.addAll({"cardName":null});
      _tempMap.forEach((key, value) {
        if(value==""){
          _tempMap.addAll({key:null});
        }
      });
    }
    return _tempMap;
  }
  CardData clone(){
    // as reference of object is passed
    CardData c = CardData();
    c.getCardDataFromMap(this.getMapFromCardData());
    return c;
  }

}
